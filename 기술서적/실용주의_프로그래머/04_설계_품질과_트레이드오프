설계 품질과 트레이드오프
<br>

- 객체지향 설계란?
```
올바른 객체에게 올바른 책임을 할당하면서 낮은 결합도와 높은 응집도를 가진 구조를 만드는 것
```
- 훌륭한 설계란?
```
합리적인 비용안에서 변경을 수용할 수 있는 구조를 만드는 것
```

#### 데이터 중심 설계 vs 책임 중심 설계 

- 데이터 중심 관점
```
- 자신이 포함하고 있는 데이터를 조작하는 데 필요한 오퍼레이션을 정의
- 객체의 상태에 초점
```


- 책임 중심 관점
```
- 다른 객체가 요청할 수 있는 오퍼레이션을 위해 필요한 상태를 보관
- 객체의 행동에 초점
```

**객체의 상태**는 `구현`에 속하고 `구현`은 변하기 쉽다.
상태의 초점을 맟추면 구현 관련 세부사항이 인터페이스에 스며들며 결국, 상태의 변경은 `인터페이스의 변경`을 초래한다.
따라서, 데이터에 초점을 맟추는 설계는 변경에 취약하다.
<br>
**객체의 책임**은 인터페이스에 속한다.
안정적인 인터페이스 뒤로 책임을 수행하는 데 필요한 상태를 `캡슐화` 하여 구현 변경에 대한 외부 파장을 방지한다.
따라서, 책임에 초점을 맟추는 설계는 변경에 안정적인 설계를 얻을 수 있다.

#### 캡슐화

- 캡슐화란?
```
외부에서 알 필요가 없는 부분을 감춤으로써 대상을 단순화하는 것
```

- 캡슐화가 중요한 이유는?
```
불안정한 부분과 안정적인 부분을 분리해서 변경의 영향을 통제할 수 있기 때문이다.
```

#### 응집도와 결합도

- 응집도란?
```
모듈에 포함된 내부 요소들이 연관돼 있는 정도,
객제지향 관점에서는 객체 또는 클래스에 얼마나 관련 높은 책임을 할당했는지를 나타내는 것 
```

- 결합도란?
```
의존성의 정도를 나타내며, 다른 모듈에 대해서 얼마나 많은 지식을 갖고 있는지를 나타내는 것
```

- 좋은 설계란?
```
높은 응집도와 낮은 결합도를 가진 모듈로 구성된 설계, 
오늘의 기능을 수행하면서 내일의 변경을 수용할 수 있는 설계
```


#### 데이터 중심 설계의 문제점

- 높은 결합도
```
여러 데이터 객체들을 사용하는 제어 로직이 틀정 객체 안에 집중되기 때문에 하나의 제어 객체가 다수의 데이터 객체에 강하게 결합된다는 것이다.

이 결합도로 인해 어떤 데이터 객체를 변경하더라도 제어 객체를 함께 변경할 수밖에 없다.
```

- 낮은 응집도
```
서로 다른 코드들을 하나의 모듈 안에 뭉쳐놓았기 때문에 변경과 아무 상관 없는 코드들이 영향을 받게 된다.

어떤 코드를 수정한 뒤 아무런 상관도 없던 코드에 문제가 발생하는 것은 모듈의 응집도가 낮을 때 발생하는 대표적인 증상이다.
```


#### 자율적인 객체를 향해

- 캡슐화를 지켜라
```
객체는 스스로의 상태를 책임져야 하며 외부에서는 인터페이스에 정의된 메서드를 통해서만 상태에 접근할 수 있어야 한다.

속성의 가시성을 private으로 설정했어도 접근자와 수정자를 통해 속성을 외부로 제공하고 있다면 캡슐화를 위반하는 것이다.
```



올바른 객체지향 설계의 `무게 중심`은 항상 객체의 내부가 아니라 `외부`에 맟춰져 있어야 한다.
객체가 내부에 어떤 상태를 가지고 그 상태를 어떻게 관리하는가는 부가적인 문제다.
중요한 객체가 다른 객체와 협력하는 방법이다.

